{"ast":null,"code":"import config from './config.json';\nvar baseUrl = config.baseUrl;\nexport function login(body) {\n  return callPost(baseUrl + '/login', body);\n}\nexport function register(body) {\n  //alert(JSON.stringify(body));\n  return callPost(baseUrl + '/register', body);\n}\nexport function routes() {\n  //JSON.parse(JSON.stringify(mongoObj)\n  var a = {\n    value: \"stationname\",\n    label: \"stationname\",\n    route: \"item_id\",\n    id: \"i\",\n    fair: \"stationfair\"\n  };\n  return a; //return callGet(baseUrl + '/railway/routes');\n}\nexport function route(station) {\n  return callGet(baseUrl + '/railway/route/' + station);\n}\nexport function trains() {\n  return callGet(baseUrl + '/railway/trains/');\n}\nexport function trainsByRoute(route) {\n  return callGet(baseUrl + '/railway/trains/' + route);\n}\nexport function classes() {\n  return callGet(baseUrl + '/railway/classes/');\n}\nexport function schedules() {\n  return callGet(baseUrl + '/railway/schedules/');\n}\nexport function validateCard(body) {\n  return callPost(baseUrl + '/payment/card', body);\n}\nexport function validatePhone(body) {\n  return callPost(baseUrl + '/payment/phone', body);\n}\nexport function makeReservation(body) {\n  return callPost(baseUrl + '/railway/reservations', body);\n}\nexport function getReservations(user) {\n  return callGet(baseUrl + '/railway/reservations/' + user);\n}\nexport function deleteReservation(id) {\n  return callDelete(baseUrl + '/railway/reservations/' + id);\n}\nexport function updateAccount(body, id) {\n  return callPut(baseUrl + '/users/' + id, body);\n}\nexport function contact(body) {\n  return callPost(baseUrl + '/railway/contact', body);\n}\n\nvar callGet = function callGet(url) {\n  return fetch(url).then(handleres);\n};\n\nvar callPost = function callPost(url, body) {\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(handleres);\n};\n\nvar callPut = function callPut(url, body) {\n  return fetch(url, {\n    method: 'PUT',\n    body: JSON.stringify(body),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(handleres);\n};\n\nvar callDelete = function callDelete(url) {\n  return fetch(url, {\n    method: 'DELETE'\n  }).then(handleres);\n};\n\nvar handleres = function handleres(res) {\n  if (res.ok) {\n    return res.json();\n  } else {\n    if (res.status === 404) {\n      return Promise.reject();\n    } else {\n      throw res.json();\n    }\n  }\n};","map":{"version":3,"sources":["/Users/dr.mac/projectRailway/railway-reservation-system-master/web/src/Services.js"],"names":["config","baseUrl","login","body","callPost","register","routes","a","value","label","route","id","fair","station","callGet","trains","trainsByRoute","classes","schedules","validateCard","validatePhone","makeReservation","getReservations","user","deleteReservation","callDelete","updateAccount","callPut","contact","url","fetch","then","handleres","method","JSON","stringify","headers","res","ok","json","status","Promise","reject"],"mappings":"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","sourcesContent":["import config from './config.json'\n\nconst baseUrl = config.baseUrl\n\nexport function login(body) {\n    return callPost(baseUrl + '/login', body);\n}\n\nexport function register(body) {\n//alert(JSON.stringify(body));\n  return callPost(baseUrl + '/register', body);\n}\n\nexport function routes() {\n//JSON.parse(JSON.stringify(mongoObj)\nvar a= {\nvalue: \"stationname\",\nlabel: \"stationname\",\nroute: \"item_id\",\nid: \"i\",\nfair: \"stationfair\"\n}\nreturn a;\n//return callGet(baseUrl + '/railway/routes');\n}\n\nexport function route(station) {\n    return callGet(baseUrl + '/railway/route/' + station);\n}\n\nexport function trains() {\n    return callGet(baseUrl + '/railway/trains/');\n}\n\nexport function trainsByRoute(route) {\n    return callGet(baseUrl + '/railway/trains/' + route);\n}\n\nexport function classes() {\n    return callGet(baseUrl + '/railway/classes/');\n}\n\nexport function schedules() {\n    return callGet(baseUrl + '/railway/schedules/');\n}\n\nexport function validateCard(body) {\n    return callPost(baseUrl + '/payment/card', body);\n}\n\nexport function validatePhone(body) {\n    return callPost(baseUrl + '/payment/phone', body);\n}\n\nexport function makeReservation(body) {\n    return callPost(baseUrl + '/railway/reservations', body);\n}\n\nexport function getReservations(user) {\n    return callGet(baseUrl + '/railway/reservations/' + user);\n}\n\nexport function deleteReservation(id) {\n    return callDelete(baseUrl + '/railway/reservations/' + id);\n}\n\nexport function updateAccount(body, id) {\n    return callPut(baseUrl + '/users/' + id, body)\n}\n\nexport function contact(body) {\n    return callPost(baseUrl + '/railway/contact', body);\n}\n\nconst callGet = (url) => {\n    return fetch(url).then(handleres);\n}\n\nconst callPost = (url, body) => {\n    return fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" }\n    }).then(handleres);\n}\n\nconst callPut = (url, body) => {\n    return fetch(url, {\n        method: 'PUT',\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" }\n    }).then(handleres);\n}\n\nconst callDelete = (url) => {\n    return fetch(url, {\n        method: 'DELETE'\n    }).then(handleres);\n}\n\nconst handleres = (res) => {\n    if (res.ok) {\n        return res.json();\n    }\n    else {\n        if (res.status === 404) {\n            return Promise.reject();\n        } else {\n            throw res.json();\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}